@@ -301,86 +301,14 @@

 void av_log_default_callback(void* ptr, int level, const char* fmt, va_list vl)
 {
-    static int print_prefix = 1;
-    static int count;
-    static char prev[LINE_SZ];
-    AVBPrint part[4];
-    char line[LINE_SZ];
-    static int is_atty;
-    int type[2];
-    unsigned tint = 0;
-
-    if (level >= 0) {
-        tint = level & 0xff00;
-        level &= 0xff;
-    }
-
-    if (level > av_log_level)
-        return;
-#if HAVE_PTHREADS
-    pthread_mutex_lock(&mutex);
-#endif
-
-    format_line(ptr, level, fmt, vl, part, &print_prefix, type);
-    snprintf(line, sizeof(line), "%s%s%s%s", part[0].str, part[1].str, part[2].str, part[3].str);
-
-#if HAVE_ISATTY
-    if (!is_atty)
-        is_atty = isatty(2) ? 1 : -1;
-#endif
-
-    if (print_prefix && (flags & AV_LOG_SKIP_REPEATED) && !strcmp(line, prev) &&
-        *line && line[strlen(line) - 1] != '\r'){
-        count++;
-        if (is_atty == 1)
-            fprintf(stderr, "    Last message repeated %d times\r", count);
-        goto end;
-    }
-    if (count > 0) {
-        fprintf(stderr, "    Last message repeated %d times\n", count);
-        count = 0;
-    }
-    strcpy(prev, line);
-    sanitize(part[0].str);
-    colored_fputs(type[0], 0, part[0].str);
-    sanitize(part[1].str);
-    colored_fputs(type[1], 0, part[1].str);
-    sanitize(part[2].str);
-    colored_fputs(av_clip(level >> 3, 0, NB_LEVELS - 1), tint >> 8, part[2].str);
-    sanitize(part[3].str);
-    colored_fputs(av_clip(level >> 3, 0, NB_LEVELS - 1), tint >> 8, part[3].str);
-
-#if CONFIG_VALGRIND_BACKTRACE
-    if (level <= BACKTRACE_LOGLEVEL)
-        VALGRIND_PRINTF_BACKTRACE("%s", "");
-#endif
-end:
-    av_bprint_finalize(part+3, NULL);
-#if HAVE_PTHREADS
-    pthread_mutex_unlock(&mutex);
-#endif
 }

-static void (*av_log_callback)(void*, int, const char*, va_list) =
-    av_log_default_callback;
-
 void av_log(void* avcl, int level, const char *fmt, ...)
 {
-    AVClass* avc = avcl ? *(AVClass **) avcl : NULL;
-    va_list vl;
-    va_start(vl, fmt);
-    if (avc && avc->version >= (50 << 16 | 15 << 8 | 2) &&
-        avc->log_level_offset_offset && level >= AV_LOG_FATAL)
-        level += *(int *) (((uint8_t *) avcl) + avc->log_level_offset_offset);
-    av_vlog(avcl, level, fmt, vl);
-    va_end(vl);
 }

 void av_vlog(void* avcl, int level, const char *fmt, va_list vl)
 {
-    void (*log_callback)(void*, int, const char*, va_list) = av_log_callback;
-    if (log_callback)
-        log_callback(avcl, level, fmt, vl);
 }

 int av_log_get_level(void)
@@ -405,21 +333,11 @@

 void av_log_set_callback(void (*callback)(void*, int, const char*, va_list))
 {
-    av_log_callback = callback;
 }

 static void missing_feature_sample(int sample, void *avc, const char *msg,
                                    va_list argument_list)
 {
-    av_vlog(avc, AV_LOG_WARNING, msg, argument_list);
-    av_log(avc, AV_LOG_WARNING, " is not implemented. Update your FFmpeg "
-           "version to the newest one from Git. If the problem still "
-           "occurs, it means that your file has a feature which has not "
-           "been implemented.\n");
-    if (sample)
-        av_log(avc, AV_LOG_WARNING, "If you want to help, upload a sample "
-               "of this file to ftp://upload.ffmpeg.org/incoming/ "
-               "and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\n");
 }

 void avpriv_request_sample(void *avc, const char *msg, ...)
